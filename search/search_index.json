{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"bayes-toolbox bayes-toolbox (aka, Bayesian Statistics Toolbox [BST]) is a Python package for running sophisticated Bayesian analyses in a simple, straight forward manner. Statement of Need (i.e., Why is this useful?) Research bayes-toolbox provides you with the tools for utilizing and exploring Bayesian statistics in your own research projects right away. By wrapping model definitions of Bayesian generalized linear models into convenient functions, bayes-toolbox makes it easy to run Bayesian analyses that are analogous to some of the most commonly used frequentist tests in the behavioral and neural sciences (think t-tests, ANOVAs, regression). Right now, Python users can choose between several packages that allow for one-liners to be called in order to run classical/frequentist tests (e.g., Pingouin , SciPy , pandas , statsmodels ). In contast, for Bayesian statistics there has been Bambi , which is excellent, but it does require more advanced knowledge and familiarity with R-brms syntax. Therefore, the goal of bayes-toolbox is to fill an important gap in the Python/Bayesian community, by providing an easy-to-use module for less experienced users that makes it as simple to run Bayesian stats as it is to run frequentist stats. As all of the models (tests) are executable with one-liners, they are ideal for use in an open, replicable (and Bayesian) workflow (watch this PyMCon talk to learn more). Example use cases and tests for nearly every model are provided in the examples directory, so you can see what a sensible Bayesian data analysis pipeline looks like. (Many of the example notebooks are adaptations of Jordi Warmenhoven's Python/PyMC3 port of John Kruschke's excellent textbook \"Doing Bayesian Data Analysis: A Tutorial with R, JAGS, and Stan (DBDA)\" . The benefits of using bayes-toolbox in terms of time and convenience will be most noticeable when utilizing hierarchical (multi-level) models, including the ANOVA-like ones. This is because bayes-toolbox takes care of the more finicky steps involved in Bayesian statistical modeling with embedded functions for things like standardizing/unstandardizing variables for more efficient MCMC sampling, parsing categorical variables for easier indexing, and implementing sum-to-zero constraints in ANOVA-like models. These are the sorts of implementational details that can add time (and frustration) when creating an analysis pipeline and discourage otherwise interested scientists from using Bayesian statistics. bayes-toolbox now removes those obstacles. The package is actively being developed in a public GitHub repository , and we always welcome new contributors! No contribution is too small. If you have any issues with the code, suggestions on how to improve it, or have requests for additional content, whether new features or tutorials, please open an issue on Github . Education bayes-toolbox will be very useful if you are going through Doing Bayesian Data Analysis and want to learn how to implement the models in Python/PyMC. We also highly recommend looking at the PyMC tutorials . Look before you leap Please note that the models in bayes-toolbox all utilize fairly uninformative, diffuse priors, which are, for the most part, the exact same ones used in the Kruschke text. New users or those with \u201cprior paralysis\u201d will likely be relieved to know that these diffuse, uninformative priors will not exert undue influence over posterior estimates and will likely satisfy skeptical reviewers. However, keep in mind that even though bayes-toolbox offers a streamlined interface for performing common statistical tests, the assumptions John Kruschke and we, the developers, make in these models may not be the ones you want to make for your particular question. Therefore, it's a good idea to go through the notebooks in the examples to make sure the model is appropriate for your applications. Part of the beauty of Bayesian modeling is its flexibility, so if you want to change priors/hyperpriors/etc., feel free to use bayes-toolbox as model scaffolding for a new bespoke model fit to your purpose. And consider making it a contribution ! You may also want to explore using Bambi . Dependencies Some of the main libraries used in this project: ArviZ NumPy pandas PyMC seaborn Xarray NOTE Use the links in the navigation bar to the left, the search bar in the upper left, or the content pages below to get started! Getting Started Tutorials Future Plans How to Contribute Bayesian models that are currently included and validated (frequentist analogue in parentheses) Comparison of two groups (independent samples t-test) Comparison of single or paired samples (paired t-test) Simple linear regression Multiple regression Multi-level (hierarchical) linear regression for modeling group- and individual-specific parameters Hierarchical (multi-level) model of metric outcome with single categorical predictor (one-way ANOVA) Hierarchical (multi-level) model of metric outcome with single categorical and single metric predictors (ANCOVA) Hierarchical (multi-level) model of metric outcome with two categorical predictors (two-way ANOVA) Hierarchical (multi-level) model of metric outcome with multiple categorical predictors and repeated measures (mixed-model ANOVA) Logistic regression models incorporating categorical or metric predictors Meta-analysis of binary outcomes using random effects model Other related Python projects For a more weapons-grade Bayesian statistical modeling interface, check out: Bambi : BAyesian Model-Building Interface (BAMBI) in Python. While Bambi requires model formulas, bayes-toolbox instead requires calling the function associated with a particular test. Citing BST If you use BST and would like to cite, please use one of the following: APA format: Kim, H. E. (2023). bayes-toolbox (Version 0.0.1) [Computer software]. https://doi.org/10.5281/zenodo.7339667 BibTeX format: @software{Kim_bayes-toolbox_2023, author = {Kim, Hyosub E.}, doi = {10.5281/zenodo.7339667}, month = apr, title = {{bayes-toolbox}}, url = {https://github.com/hyosubkim/bayes-toolbox}, version = {0.0.1}, year = {2023} } License This work is distributed under a MIT license . Acknowledgments Thank you to the following people for generously sharing their work and knowledge: - John Kruschke - Richard McElreath - Jordi Warmenhoven - This project grew out of updating Jordi's great Python/PyMC 3.0. port of the Kruschke textbook. - PyMC developers - ArviZ developers","title":"Home"},{"location":"#bayes-toolbox","text":"bayes-toolbox (aka, Bayesian Statistics Toolbox [BST]) is a Python package for running sophisticated Bayesian analyses in a simple, straight forward manner.","title":"bayes-toolbox"},{"location":"#statement-of-need-ie-why-is-this-useful","text":"","title":"Statement of Need (i.e., Why is this useful?)"},{"location":"#research","text":"bayes-toolbox provides you with the tools for utilizing and exploring Bayesian statistics in your own research projects right away. By wrapping model definitions of Bayesian generalized linear models into convenient functions, bayes-toolbox makes it easy to run Bayesian analyses that are analogous to some of the most commonly used frequentist tests in the behavioral and neural sciences (think t-tests, ANOVAs, regression). Right now, Python users can choose between several packages that allow for one-liners to be called in order to run classical/frequentist tests (e.g., Pingouin , SciPy , pandas , statsmodels ). In contast, for Bayesian statistics there has been Bambi , which is excellent, but it does require more advanced knowledge and familiarity with R-brms syntax. Therefore, the goal of bayes-toolbox is to fill an important gap in the Python/Bayesian community, by providing an easy-to-use module for less experienced users that makes it as simple to run Bayesian stats as it is to run frequentist stats. As all of the models (tests) are executable with one-liners, they are ideal for use in an open, replicable (and Bayesian) workflow (watch this PyMCon talk to learn more). Example use cases and tests for nearly every model are provided in the examples directory, so you can see what a sensible Bayesian data analysis pipeline looks like. (Many of the example notebooks are adaptations of Jordi Warmenhoven's Python/PyMC3 port of John Kruschke's excellent textbook \"Doing Bayesian Data Analysis: A Tutorial with R, JAGS, and Stan (DBDA)\" . The benefits of using bayes-toolbox in terms of time and convenience will be most noticeable when utilizing hierarchical (multi-level) models, including the ANOVA-like ones. This is because bayes-toolbox takes care of the more finicky steps involved in Bayesian statistical modeling with embedded functions for things like standardizing/unstandardizing variables for more efficient MCMC sampling, parsing categorical variables for easier indexing, and implementing sum-to-zero constraints in ANOVA-like models. These are the sorts of implementational details that can add time (and frustration) when creating an analysis pipeline and discourage otherwise interested scientists from using Bayesian statistics. bayes-toolbox now removes those obstacles. The package is actively being developed in a public GitHub repository , and we always welcome new contributors! No contribution is too small. If you have any issues with the code, suggestions on how to improve it, or have requests for additional content, whether new features or tutorials, please open an issue on Github .","title":"Research"},{"location":"#education","text":"bayes-toolbox will be very useful if you are going through Doing Bayesian Data Analysis and want to learn how to implement the models in Python/PyMC. We also highly recommend looking at the PyMC tutorials .","title":"Education"},{"location":"#look-before-you-leap","text":"Please note that the models in bayes-toolbox all utilize fairly uninformative, diffuse priors, which are, for the most part, the exact same ones used in the Kruschke text. New users or those with \u201cprior paralysis\u201d will likely be relieved to know that these diffuse, uninformative priors will not exert undue influence over posterior estimates and will likely satisfy skeptical reviewers. However, keep in mind that even though bayes-toolbox offers a streamlined interface for performing common statistical tests, the assumptions John Kruschke and we, the developers, make in these models may not be the ones you want to make for your particular question. Therefore, it's a good idea to go through the notebooks in the examples to make sure the model is appropriate for your applications. Part of the beauty of Bayesian modeling is its flexibility, so if you want to change priors/hyperpriors/etc., feel free to use bayes-toolbox as model scaffolding for a new bespoke model fit to your purpose. And consider making it a contribution ! You may also want to explore using Bambi .","title":"Look before you leap"},{"location":"#dependencies","text":"Some of the main libraries used in this project: ArviZ NumPy pandas PyMC seaborn Xarray NOTE Use the links in the navigation bar to the left, the search bar in the upper left, or the content pages below to get started! Getting Started Tutorials Future Plans How to Contribute","title":"Dependencies"},{"location":"#bayesian-models-that-are-currently-included-and-validated-frequentist-analogue-in-parentheses","text":"Comparison of two groups (independent samples t-test) Comparison of single or paired samples (paired t-test) Simple linear regression Multiple regression Multi-level (hierarchical) linear regression for modeling group- and individual-specific parameters Hierarchical (multi-level) model of metric outcome with single categorical predictor (one-way ANOVA) Hierarchical (multi-level) model of metric outcome with single categorical and single metric predictors (ANCOVA) Hierarchical (multi-level) model of metric outcome with two categorical predictors (two-way ANOVA) Hierarchical (multi-level) model of metric outcome with multiple categorical predictors and repeated measures (mixed-model ANOVA) Logistic regression models incorporating categorical or metric predictors Meta-analysis of binary outcomes using random effects model","title":"Bayesian models that are currently included and validated (frequentist analogue in parentheses)"},{"location":"#other-related-python-projects","text":"For a more weapons-grade Bayesian statistical modeling interface, check out: Bambi : BAyesian Model-Building Interface (BAMBI) in Python. While Bambi requires model formulas, bayes-toolbox instead requires calling the function associated with a particular test.","title":"Other related Python projects"},{"location":"#citing-bst","text":"If you use BST and would like to cite, please use one of the following: APA format: Kim, H. E. (2023). bayes-toolbox (Version 0.0.1) [Computer software]. https://doi.org/10.5281/zenodo.7339667 BibTeX format: @software{Kim_bayes-toolbox_2023, author = {Kim, Hyosub E.}, doi = {10.5281/zenodo.7339667}, month = apr, title = {{bayes-toolbox}}, url = {https://github.com/hyosubkim/bayes-toolbox}, version = {0.0.1}, year = {2023} }","title":"Citing BST"},{"location":"#license","text":"This work is distributed under a MIT license .","title":"License"},{"location":"#acknowledgments","text":"Thank you to the following people for generously sharing their work and knowledge: - John Kruschke - Richard McElreath - Jordi Warmenhoven - This project grew out of updating Jordi's great Python/PyMC 3.0. port of the Kruschke textbook. - PyMC developers - ArviZ developers","title":"Acknowledgments"},{"location":"future-plans/","text":"Future Plans Are there any plans to further develop bayes-toolbox? Yes, bayes-toolbox is in continuous development. The following are planned for the near future: More Bayesian meta-analyses Bayesian spectral analysis Model selection Incorporating prior and posterior predictive checks into examples (logistic regression notebook has example of prior predictive check) Incorporating maximum entropy priors If you use bayes-toolbox and/or have suggestions, please check out How to Contribute .","title":"Future Plans"},{"location":"future-plans/#future-plans","text":"Are there any plans to further develop bayes-toolbox? Yes, bayes-toolbox is in continuous development. The following are planned for the near future: More Bayesian meta-analyses Bayesian spectral analysis Model selection Incorporating prior and posterior predictive checks into examples (logistic regression notebook has example of prior predictive check) Incorporating maximum entropy priors If you use bayes-toolbox and/or have suggestions, please check out How to Contribute .","title":"Future Plans"},{"location":"getting-started/","text":"How do I get started? Installation Recommended (pip) We recommend installing the latest stable version of bayes_toolbox with pip (from the Terminal): pip install bayes_toolbox From source: Cloning and building The latest development version of bayes-toolbox can be cloned from GitHub using git : git clone https://github.com/hyosubkim/bayes-toolbox.git To build and install the project (from the root directory, i.e., inside the cloned bayes-toolbox directory): python3 -m pip install -e . Dependencies bayes_toolbox has the following dependencies (all of which should be automatically imported with a pip installation): - aesara - arviz - numpy - pandas - pymc Virtual environment You can create a virtual environment with all of the necessary dependencies. If you've cloned the bayes-toolbox repository, make sure you're in the root directory of the cloned repository (i.e., bayes-toolbox ) and type the following conda command in the Terminal ( Anaconda is strongly recommended for installing Python and the conda utility on your computer): conda env create --name bayes_toolbox --file environment.yml Instead of bayes_toolbox , you may wish to give your environment a different name. If you're not using MacOSX and want to replicate this environment, read the \"Export your environment\" section of this page . After cloning and installing bayes-toolbox locally, you can access it from any directory. Helpful hints If you've created the bayes_toolbox virtual environment and want to access the correct kernel from a Jupyter notebook, you must manually add the kernel for your new virtual environment \"bayes_toolbox\" (or whatever you named it). To do so, you first need to install ipykernel : pip install --user ipykernel Next, add your virtual environment to Jupyter: python -m ipykernel install --user --name=MYENV Use whatever you named your virtual environment in place of MYENV . That should be all that's necessary in order to choose your new virtual environment as a kernel from your Jupyter notebook. For more details, read this page . How do I learn to use bayes-toolbox? The BEST notebook (short for \"Bayesian Estimation Supersedes the t-Test\", a famous 2013 article by John Kruschke) in the examples directory is a good place to see how bayes-toolbox can be used to make implementing Bayesian analyses easy. I've adapted the notebook of the same name from the PyMC developers to show how the model building and MCMC sampling are all embedded in a single function now. You can see similar workflows for other model types in all of the other example notebooks, which track several of the chapters from \"Doing Bayesian Data Analysis\" and is modeled off of Jordi Warmenhoven's repo . Example syntax Following imports of the most common Python packages for data analysis and Bayesian statistics, import bayes_toolbox . # Usual imports import arviz as az import matplotlib.pyplot as plt import numpy as np import pandas as pd import pymc as pm import seaborn as sns import xarray as xr # Import the bayes-toolbox package import bayes_toolbox.glm as bg Import the data you want to model (the following example can be found in the examples subdirectory). So far, these are all standard steps and not specific to bayes-toolbox . # Import data (from 'examples' subdirectory) into pandas data frame df = pd.read_csv(\"data/HierLinRegressData.csv\") df.Subj = df_HRegr.Subj.astype(\"category\") df.Subj = df_HRegr.Subj.cat.as_ordered() Now, with bayes-toolbox , if you want to run a fairly sophisticated multi-level (hierarchical) linear regression model in which you are modeling individual as well as group-level slope and intercept parameters, simply call the appropriate function: # Call your bayes-toolbox function and return the PyMC model and InferenceData objects model, idata = bg.hierarchical_regression( df[\"X\"], df[\"Y\"], df[\"Subj\"], acceptance_rate=0.95 ) Before, this exact same analysis would have taken many more lines of code: # Standardize variables zx, mu_x, sigma_x = standardize(df[\"X\"]) zy, mu_y, sigma_y = standardize(df[\"Y\") # Convert subject variable to categorical dtype if it is not already subj_idx, subj_levels, n_subj = parse_categorical(df[\"Subj\"]) # Define your statistical model with pm.Model(coords={\"subj\": subj_levels}) as model: # Hyperpriors zbeta0 = pm.Normal(\"zbeta0\", mu=0, tau=1 / 10**2) zbeta1 = pm.Normal(\"zbeta1\", mu=0, tau=1 / 10**2) zsigma0 = pm.Uniform(\"zsigma0\", 10**-3, 10**3) zsigma1 = pm.Uniform(\"zsigma1\", 10**-3, 10**3) # Priors for individual subject parameters zbeta0_s_offset = pm.Normal(\"zbeta0_s_offset\", mu=0, sigma=1, dims=\"subj\") zbeta0_s = pm.Deterministic( \"zbeta0_s\", zbeta0 + zbeta0_s_offset * zsigma0, dims=\"subj\" ) zbeta1_s_offset = pm.Normal(\"zbeta1_s_offset\", mu=0, sigma=1, dims=\"subj\") zbeta1_s = pm.Deterministic( \"zbeta1_s\", zbeta1 + zbeta1_s_offset * zsigma1, dims=\"subj\" ) mu = zbeta0_s[subj_idx] + zbeta1_s[subj_idx] * zx zsigma = pm.Uniform(\"zsigma\", 10**-3, 10**3) nu_minus_one = pm.Exponential(\"nu_minus_one\", 1 / 29) nu = pm.Deterministic(\"nu\", nu_minus_one + 1) # Define likelihood function likelihood = pm.StudentT(\"likelihood\", nu, mu=mu, sigma=zsigma, observed=zy) # Sample from posterior idata = pm.sample(draws=n_draws, target_accept=acceptance_rate)","title":"Getting Started"},{"location":"getting-started/#how-do-i-get-started","text":"","title":"How do I get started?"},{"location":"getting-started/#installation","text":"","title":"Installation"},{"location":"getting-started/#recommended-pip","text":"We recommend installing the latest stable version of bayes_toolbox with pip (from the Terminal): pip install bayes_toolbox","title":"Recommended (pip)"},{"location":"getting-started/#from-source-cloning-and-building","text":"The latest development version of bayes-toolbox can be cloned from GitHub using git : git clone https://github.com/hyosubkim/bayes-toolbox.git To build and install the project (from the root directory, i.e., inside the cloned bayes-toolbox directory): python3 -m pip install -e .","title":"From source: Cloning and building"},{"location":"getting-started/#dependencies","text":"bayes_toolbox has the following dependencies (all of which should be automatically imported with a pip installation): - aesara - arviz - numpy - pandas - pymc","title":"Dependencies"},{"location":"getting-started/#virtual-environment","text":"You can create a virtual environment with all of the necessary dependencies. If you've cloned the bayes-toolbox repository, make sure you're in the root directory of the cloned repository (i.e., bayes-toolbox ) and type the following conda command in the Terminal ( Anaconda is strongly recommended for installing Python and the conda utility on your computer): conda env create --name bayes_toolbox --file environment.yml Instead of bayes_toolbox , you may wish to give your environment a different name. If you're not using MacOSX and want to replicate this environment, read the \"Export your environment\" section of this page . After cloning and installing bayes-toolbox locally, you can access it from any directory.","title":"Virtual environment"},{"location":"getting-started/#helpful-hints","text":"If you've created the bayes_toolbox virtual environment and want to access the correct kernel from a Jupyter notebook, you must manually add the kernel for your new virtual environment \"bayes_toolbox\" (or whatever you named it). To do so, you first need to install ipykernel : pip install --user ipykernel Next, add your virtual environment to Jupyter: python -m ipykernel install --user --name=MYENV Use whatever you named your virtual environment in place of MYENV . That should be all that's necessary in order to choose your new virtual environment as a kernel from your Jupyter notebook. For more details, read this page .","title":"Helpful hints"},{"location":"getting-started/#how-do-i-learn-to-use-bayes-toolbox","text":"The BEST notebook (short for \"Bayesian Estimation Supersedes the t-Test\", a famous 2013 article by John Kruschke) in the examples directory is a good place to see how bayes-toolbox can be used to make implementing Bayesian analyses easy. I've adapted the notebook of the same name from the PyMC developers to show how the model building and MCMC sampling are all embedded in a single function now. You can see similar workflows for other model types in all of the other example notebooks, which track several of the chapters from \"Doing Bayesian Data Analysis\" and is modeled off of Jordi Warmenhoven's repo .","title":"How do I learn to use bayes-toolbox?"},{"location":"getting-started/#example-syntax","text":"Following imports of the most common Python packages for data analysis and Bayesian statistics, import bayes_toolbox . # Usual imports import arviz as az import matplotlib.pyplot as plt import numpy as np import pandas as pd import pymc as pm import seaborn as sns import xarray as xr # Import the bayes-toolbox package import bayes_toolbox.glm as bg Import the data you want to model (the following example can be found in the examples subdirectory). So far, these are all standard steps and not specific to bayes-toolbox . # Import data (from 'examples' subdirectory) into pandas data frame df = pd.read_csv(\"data/HierLinRegressData.csv\") df.Subj = df_HRegr.Subj.astype(\"category\") df.Subj = df_HRegr.Subj.cat.as_ordered() Now, with bayes-toolbox , if you want to run a fairly sophisticated multi-level (hierarchical) linear regression model in which you are modeling individual as well as group-level slope and intercept parameters, simply call the appropriate function: # Call your bayes-toolbox function and return the PyMC model and InferenceData objects model, idata = bg.hierarchical_regression( df[\"X\"], df[\"Y\"], df[\"Subj\"], acceptance_rate=0.95 ) Before, this exact same analysis would have taken many more lines of code: # Standardize variables zx, mu_x, sigma_x = standardize(df[\"X\"]) zy, mu_y, sigma_y = standardize(df[\"Y\") # Convert subject variable to categorical dtype if it is not already subj_idx, subj_levels, n_subj = parse_categorical(df[\"Subj\"]) # Define your statistical model with pm.Model(coords={\"subj\": subj_levels}) as model: # Hyperpriors zbeta0 = pm.Normal(\"zbeta0\", mu=0, tau=1 / 10**2) zbeta1 = pm.Normal(\"zbeta1\", mu=0, tau=1 / 10**2) zsigma0 = pm.Uniform(\"zsigma0\", 10**-3, 10**3) zsigma1 = pm.Uniform(\"zsigma1\", 10**-3, 10**3) # Priors for individual subject parameters zbeta0_s_offset = pm.Normal(\"zbeta0_s_offset\", mu=0, sigma=1, dims=\"subj\") zbeta0_s = pm.Deterministic( \"zbeta0_s\", zbeta0 + zbeta0_s_offset * zsigma0, dims=\"subj\" ) zbeta1_s_offset = pm.Normal(\"zbeta1_s_offset\", mu=0, sigma=1, dims=\"subj\") zbeta1_s = pm.Deterministic( \"zbeta1_s\", zbeta1 + zbeta1_s_offset * zsigma1, dims=\"subj\" ) mu = zbeta0_s[subj_idx] + zbeta1_s[subj_idx] * zx zsigma = pm.Uniform(\"zsigma\", 10**-3, 10**3) nu_minus_one = pm.Exponential(\"nu_minus_one\", 1 / 29) nu = pm.Deterministic(\"nu\", nu_minus_one + 1) # Define likelihood function likelihood = pm.StudentT(\"likelihood\", nu, mu=mu, sigma=zsigma, observed=zy) # Sample from posterior idata = pm.sample(draws=n_draws, target_accept=acceptance_rate)","title":"Example syntax"},{"location":"how-to-contribute/","text":"Contributing Guidelines Thank you for your interest in contributing to bayes-toolbox ! This is an open-source project and everyone is welcome to contribute to it. As this project evolves and grows in size and scope, these guidelines will also evolve. However, for now we have some general guidelines to follow. Did you find a bug? Please check the Issues page first to see if it has already been reported. If the bug has not been reported, please open a new Issue. Did you write a patch that fixes a bug? Open a new GitHub pull request (PR) with your fix. Please include a clear description of the problem and your solution in your PR, as well as the relevant issue number if applicable. Do you have suggestions for a new feature? Please let us know by opening a new Issue . Thanks for reading, and hope you will join the project!","title":"How to Contribute"},{"location":"how-to-contribute/#contributing-guidelines","text":"Thank you for your interest in contributing to bayes-toolbox ! This is an open-source project and everyone is welcome to contribute to it. As this project evolves and grows in size and scope, these guidelines will also evolve. However, for now we have some general guidelines to follow. Did you find a bug? Please check the Issues page first to see if it has already been reported. If the bug has not been reported, please open a new Issue. Did you write a patch that fixes a bug? Open a new GitHub pull request (PR) with your fix. Please include a clear description of the problem and your solution in your PR, as well as the relevant issue number if applicable. Do you have suggestions for a new feature? Please let us know by opening a new Issue . Thanks for reading, and hope you will join the project!","title":"Contributing Guidelines"},{"location":"tutorials/","text":"bayes-toolbox tutorials Update: Hyosub's recorded PyMCon talk is now up on YouTube. You can find links to the talk and the tutorial notebook here . A Jupyter version of the tutorial is also available in the examples directory of the bayes-toolbox repository. The examples page has many other great examples of using bayes-toolbox . Much of the data and images are from the website for John K. Kruschke's textbook Doing Bayesian Data Analysis: A Tutorial with R, JAGS, and Stan . The notebooks are a combination of adaptations of Jordi Warmenhoven's excellent PyMC3 port of the textbook , edited materials put out by the PyMC developers, and original material. They are meant as example use cases that show you how to use bayes-toolbox and take advantage of some of the new functionality afforded since the release of PyMC 4.0 with ArviZ.","title":"Tutorials"},{"location":"tutorials/#bayes-toolbox-tutorials","text":"Update: Hyosub's recorded PyMCon talk is now up on YouTube. You can find links to the talk and the tutorial notebook here . A Jupyter version of the tutorial is also available in the examples directory of the bayes-toolbox repository. The examples page has many other great examples of using bayes-toolbox . Much of the data and images are from the website for John K. Kruschke's textbook Doing Bayesian Data Analysis: A Tutorial with R, JAGS, and Stan . The notebooks are a combination of adaptations of Jordi Warmenhoven's excellent PyMC3 port of the textbook , edited materials put out by the PyMC developers, and original material. They are meant as example use cases that show you how to use bayes-toolbox and take advantage of some of the new functionality afforded since the release of PyMC 4.0 with ArviZ.","title":"bayes-toolbox tutorials"}]}